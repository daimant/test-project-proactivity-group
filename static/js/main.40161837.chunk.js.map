{"version":3,"sources":["Components/ServiceList/ServiceList.module.css","Components/Favorites/Favorites.module.css","serviceWorker.js","Redux/navigations-reducer.js","Redux/service-list-reducer.js","Redux/favorites-reducer.js","Redux/store.jsx","Components/ServiceList/ServiceList.jsx","Components/Favorites/Favorites.jsx","Components/NavBar/NavBar.jsx","App.js","AppContainer.jsx","AppShopServices.js","index.js","Components/NavBar/NavBar.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","initialStore","link","text","navigationsReducer","state","action","console","log","serviceListReducer","favoritesReducer","reducers","combineReducers","navigationsData","serviceListData","favoritesData","store","createStore","applyMiddleware","thunkMiddleware","ServiceList","className","classes","serviceList","Favorites","favorites","NavBar","nav","item","active","to","activeClassName","activeLink","App","exact","path","render","AppContainer","compose","withRouter","connect","AppShopServices","StrictMode","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+JACAA,EAAOC,QAAU,CAAC,YAAc,mC,mBCAhCD,EAAOC,QAAU,CAAC,UAAY,+B,2ICWVC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCClBFC,EAAe,CACjB,CAAEC,KAAM,gBAAiBC,KAAM,yFAC/B,CAAED,KAAM,aAAcC,KAAM,2DAQfC,EALY,WAAmC,IAAlCC,EAAiC,uDAAzBJ,EAAcK,EAAW,uCAE3D,OADIA,GAAQC,QAAQC,IAAIF,GACjBD,G,QCPLJ,EAAe,GAOJQ,EALY,WAAmC,IAAlCJ,EAAiC,uDAAzBJ,EAAcK,EAAW,uCAE3D,OADIA,GAAQC,QAAQC,IAAIF,GACjBD,GCJLJ,EAAe,GAOJS,EALU,WAAmC,IAAlCL,EAAiC,uDAAzBJ,EAAcK,EAAW,uCAEzD,OADIA,GAAQC,QAAQC,IAAIF,GACjBD,GCELM,EAAWC,YAAgB,CAC7BC,gBAAiBT,EACjBU,gBAAiBL,EACjBM,cAAeL,IAKFM,EAFDC,YAAYN,EAAUO,YAAgBC,M,wBCLrCC,EAJK,WAClB,OAAO,wBAAIC,UAAWC,IAAQC,aAAvB,iB,iBCGMC,EAJG,WAChB,OAAO,wBAAIH,UAAWC,IAAQG,WAAvB,c,gBCiBMC,EAjBA,WACb,OACE,yBAAKL,UAAWC,IAAQK,KACtB,yBAAKN,UAAS,UAAKC,IAAQM,KAAb,YAAqBN,IAAQO,SACzC,kBAAC,IAAD,CAASC,GAAG,gBAAgBC,gBAAiBT,IAAQU,YAArD,0FAIF,yBAAKX,UAAS,UAAKC,IAAQM,KAAb,YAAqBN,IAAQO,SACzC,kBAAC,IAAD,CAASC,GAAG,aAAaC,gBAAiBT,IAAQU,YAAlD,6DCqBOC,EAtBH,WACV,OACE,kBAAC,IAAD,KACE,yBAAKZ,UAAU,eACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,uBACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEa,OAAK,EACLC,KAAK,IACLC,OAAQ,kBAAM,kBAAC,IAAD,CAAUN,GAAI,qBAE9B,kBAAC,IAAD,CAAOK,KAAK,gBAAgBC,OAAQ,kBAAM,kBAAC,EAAD,SAC1C,kBAAC,IAAD,CAAOD,KAAK,aAAaC,OAAQ,kBAAM,kBAAC,EAAD,SACvC,kBAAC,IAAD,CAAOD,KAAK,IAAIC,OAAQ,kBAAM,gJClB3BC,EAFMC,YAAQC,IAAYC,aADjB,iBAAO,KACmC,IAA7CF,CAAkDL,GCYxDQ,EAXS,WACtB,OACE,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAU1B,MAAOA,GACf,kBAAC,EAAD,UCNV2B,IAASP,OAAO,kBAAC,EAAD,MAAqBQ,SAASC,eAAe,SX6HvD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACN9C,QAAQ8C,MAAMA,EAAMC,a,kBYxI5B5D,EAAOC,QAAU,CAAC,IAAM,oBAAoB,KAAO,qBAAqB,WAAa,8B","file":"static/js/main.40161837.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"serviceList\":\"ServiceList_serviceList__2PvgX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"favorites\":\"Favorites_favorites__3esbM\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","let initialStore = [\r\n  { link: \"/service-list\", text: \"Список сервисов\" },\r\n  { link: \"/favorites\", text: \"Избранное\" },\r\n];\r\n\r\nconst navigationsReducer = (state = initialStore, action) => {\r\n  if (action) console.log(action);\r\n  return state;\r\n};\r\n\r\nexport default navigationsReducer;\r\n","let initialStore = [];\r\n\r\nconst serviceListReducer = (state = initialStore, action) => {\r\n  if (action) console.log(action);\r\n  return state;\r\n};\r\n\r\nexport default serviceListReducer;\r\n","let initialStore = [];\r\n\r\nconst favoritesReducer = (state = initialStore, action) => {\r\n  if (action) console.log(action);\r\n  return state;\r\n};\r\n\r\nexport default favoritesReducer;\r\n","import { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport navigationsReducer from \"./navigations-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport serviceListReducer from \"./service-list-reducer\";\r\nimport favoritesReducer from \"./favorites-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n  navigationsData: navigationsReducer,\r\n  serviceListData: serviceListReducer,\r\n  favoritesData: favoritesReducer,\r\n});\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport classes from \"./ServiceList.module.css\";\r\n\r\nconst ServiceList = () => {\r\n  return <h1 className={classes.serviceList}>Service List</h1>;\r\n};\r\n\r\nexport default ServiceList;\r\n","import React from \"react\";\r\nimport classes from \"./Favorites.module.css\";\r\n\r\nconst Favorites = () => {\r\n  return <h1 className={classes.favorites}>Favorites</h1>;\r\n};\r\n\r\nexport default Favorites;\r\n","import React from \"react\";\r\nimport classes from \"./NavBar.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst NavBar = () => {\r\n  return (\r\n    <nav className={classes.nav}>\r\n      <div className={`${classes.item} ${classes.active}`}>\r\n        <NavLink to=\"/service-list\" activeClassName={classes.activeLink}>\r\n          Список сервисов\r\n        </NavLink>\r\n      </div>\r\n      <div className={`${classes.item} ${classes.active}`}>\r\n        <NavLink to=\"/favorites\" activeClassName={classes.activeLink}>\r\n          Избранное\r\n        </NavLink>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Redirect,\r\n  Route,\r\n  Switch,\r\n} from \"react-router-dom\";\r\nimport ServiceList from \"./Components/ServiceList/ServiceList\";\r\nimport Favorites from \"./Components/Favorites/Favorites\";\r\nimport NavBar from \"./Components/NavBar/NavBar\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <Router>\r\n      <div className=\"app-wrapper\">\r\n        <NavBar />\r\n        <div className=\"app-wrapper-content\">\r\n          <Switch>\r\n            <Route\r\n              exact\r\n              path=\"/\"\r\n              render={() => <Redirect to={\"/service-list\"} />}\r\n            />\r\n            <Route path=\"/service-list\" render={() => <ServiceList />} />\r\n            <Route path=\"/favorites\" render={() => <Favorites />} />\r\n            <Route path=\"*\" render={() => <h1>Страница не найдена</h1>} />\r\n          </Switch>\r\n        </div>\r\n      </div>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { compose } from \"redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport App from \"./App\";\r\n\r\nconst mapStateToProps = () => ({});\r\nconst AppContainer = compose(withRouter, connect(mapStateToProps, {}))(App);\r\n\r\nexport default AppContainer;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./Redux/store\";\r\nimport AppContainer from \"./AppContainer\";\r\n\r\nconst AppShopServices = () => {\r\n  return (\r\n    <React.StrictMode>\r\n      <Router>\r\n        <Provider store={store}>\r\n          <AppContainer />\r\n        </Provider>\r\n      </Router>\r\n    </React.StrictMode>\r\n  );\r\n};\r\nexport default AppShopServices;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport AppShopServices from \"./AppShopServices\";\r\n\r\nReactDOM.render(<AppShopServices />, document.getElementById(\"root\"));\r\n\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"NavBar_nav__Rfdgw\",\"item\":\"NavBar_item__NcN4s\",\"activeLink\":\"NavBar_activeLink__tvnqb\"};"],"sourceRoot":""}