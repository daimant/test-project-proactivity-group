{"version":3,"sources":["Components/ServiceList/ServiceList.module.css","Components/Favorites/Favorites.module.css","serviceWorker.js","Redux/navigations-reducer.js","Redux/service-list-reducer.js","Redux/favorites-reducer.js","Redux/store.jsx","Components/ServiceList/ServiceList.jsx","Components/Favorites/Favorites.jsx","Components/NavBar/NavBar.jsx","App.js","AppContainer.jsx","AppShopServices.js","index.js","Components/NavBar/NavBar.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","initialStore","link","text","navigationsReducer","state","action","console","log","serviceListReducer","favoritesReducer","reducers","combineReducers","navigationsData","serviceListData","favoritesData","store","createStore","applyMiddleware","thunkMiddleware","ServiceList","className","classes","serviceList","Favorites","favorites","NavBar","nav","item","active","to","activeClassName","activeLink","App","exact","path","render","AppContainer","compose","withRouter","connect","AppShopServices","StrictMode","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+JACAA,EAAOC,QAAU,CAAC,YAAc,mC,mBCAhCD,EAAOC,QAAU,CAAC,UAAY,+B,2ICWVC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCClBFC,EAAe,CACjB,CAAEC,KAAM,gBAAiBC,KAAM,yFAC/B,CAAED,KAAM,aAAcC,KAAM,2DAQfC,EALY,WAAmC,IAAlCC,EAAiC,uDAAzBJ,EAAcK,EAAW,uCAE3D,OADIA,GAAQC,QAAQC,IAAIF,GACjBD,G,QCPLJ,EAAe,GAOJQ,EALY,WAAmC,IAAlCJ,EAAiC,uDAAzBJ,EAAcK,EAAW,uCAE3D,OADIA,GAAQC,QAAQC,IAAIF,GACjBD,GCJLJ,EAAe,GAOJS,EALU,WAAmC,IAAlCL,EAAiC,uDAAzBJ,EAAcK,EAAW,uCAEzD,OADIA,GAAQC,QAAQC,IAAIF,GACjBD,GCELM,EAAWC,YAAgB,CAC7BC,gBAAiBT,EACjBU,gBAAiBL,EACjBM,cAAeL,IAKFM,EAFDC,YAAYN,EAAUO,YAAgBC,M,wBCLrCC,EAJK,WAClB,OAAO,wBAAIC,UAAWC,IAAQC,aAAvB,iB,iBCGMC,EAJG,WAChB,OAAO,wBAAIH,UAAWC,IAAQG,WAAvB,c,gBCiBMC,EAjBA,WACb,OACE,yBAAKL,UAAWC,IAAQK,KACtB,yBAAKN,UAAS,UAAKC,IAAQM,KAAb,YAAqBN,IAAQO,SACzC,kBAAC,IAAD,CAASC,GAAG,gBAAgBC,gBAAiBT,IAAQU,YAArD,0FAIF,yBAAKX,UAAS,UAAKC,IAAQM,KAAb,YAAqBN,IAAQO,SACzC,kBAAC,IAAD,CAASC,GAAG,aAAaC,gBAAiBT,IAAQU,YAAlD,6DCqBOC,EAtBH,WACV,OACE,kBAAC,IAAD,KACE,yBAAKZ,UAAU,eACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,uBACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEa,OAAK,EACLC,KAAK,IACLC,OAAQ,kBAAM,kBAAC,IAAD,CAAUN,GAAI,qBAE9B,kBAAC,IAAD,CAAOK,KAAK,gBAAgBC,OAAQ,kBAAM,kBAAC,EAAD,SAC1C,kBAAC,IAAD,CAAOD,KAAK,aAAaC,OAAQ,kBAAM,kBAAC,EAAD,SACvC,kBAAC,IAAD,CAAOD,KAAK,IAAIC,OAAQ,kBAAM,gJClB3BC,EAFMC,YAAQC,IAAYC,aADjB,iBAAO,KACmC,IAA7CF,CAAkDL,GCYxDQ,EAXS,WACtB,OACE,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAU1B,MAAOA,GACf,kBAAC,EAAD,UCNV2B,IAASP,OAAO,kBAAC,EAAD,MAAqBQ,SAASC,eAAe,SX6HvD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACN9C,QAAQ8C,MAAMA,EAAMC,a,kBYxI5B5D,EAAOC,QAAU,CAAC,IAAM,oBAAoB,KAAO,qBAAqB,WAAa,8B","file":"static/js/main.5974d1ff.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"serviceList\":\"ServiceList_serviceList__3ZDil\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"favorites\":\"Favorites_favorites__3lLOI\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","let initialStore = [\n  { link: \"/service-list\", text: \"Список сервисов\" },\n  { link: \"/favorites\", text: \"Избранное\" },\n];\n\nconst navigationsReducer = (state = initialStore, action) => {\n  if (action) console.log(action);\n  return state;\n};\n\nexport default navigationsReducer;\n","let initialStore = [];\n\nconst serviceListReducer = (state = initialStore, action) => {\n  if (action) console.log(action);\n  return state;\n};\n\nexport default serviceListReducer;\n","let initialStore = [];\n\nconst favoritesReducer = (state = initialStore, action) => {\n  if (action) console.log(action);\n  return state;\n};\n\nexport default favoritesReducer;\n","import { applyMiddleware, combineReducers, createStore } from \"redux\";\nimport navigationsReducer from \"./navigations-reducer\";\nimport thunkMiddleware from \"redux-thunk\";\nimport serviceListReducer from \"./service-list-reducer\";\nimport favoritesReducer from \"./favorites-reducer\";\n\nlet reducers = combineReducers({\n  navigationsData: navigationsReducer,\n  serviceListData: serviceListReducer,\n  favoritesData: favoritesReducer,\n});\n\nconst store = createStore(reducers, applyMiddleware(thunkMiddleware));\n\nexport default store;\n","import React from \"react\";\nimport classes from \"./ServiceList.module.css\";\n\nconst ServiceList = () => {\n  return <h1 className={classes.serviceList}>Service List</h1>;\n};\n\nexport default ServiceList;\n","import React from \"react\";\nimport classes from \"./Favorites.module.css\";\n\nconst Favorites = () => {\n  return <h1 className={classes.favorites}>Favorites</h1>;\n};\n\nexport default Favorites;\n","import React from \"react\";\nimport classes from \"./NavBar.module.css\";\nimport { NavLink } from \"react-router-dom\";\n\nconst NavBar = () => {\n  return (\n    <nav className={classes.nav}>\n      <div className={`${classes.item} ${classes.active}`}>\n        <NavLink to=\"/service-list\" activeClassName={classes.activeLink}>\n          Список сервисов\n        </NavLink>\n      </div>\n      <div className={`${classes.item} ${classes.active}`}>\n        <NavLink to=\"/favorites\" activeClassName={classes.activeLink}>\n          Избранное\n        </NavLink>\n      </div>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","import React from \"react\";\nimport \"./App.css\";\nimport {\n  BrowserRouter as Router,\n  Redirect,\n  Route,\n  Switch,\n} from \"react-router-dom\";\nimport ServiceList from \"./Components/ServiceList/ServiceList\";\nimport Favorites from \"./Components/Favorites/Favorites\";\nimport NavBar from \"./Components/NavBar/NavBar\";\n\nconst App = () => {\n  return (\n    <Router>\n      <div className=\"app-wrapper\">\n        <NavBar />\n        <div className=\"app-wrapper-content\">\n          <Switch>\n            <Route\n              exact\n              path=\"/\"\n              render={() => <Redirect to={\"/service-list\"} />}\n            />\n            <Route path=\"/service-list\" render={() => <ServiceList />} />\n            <Route path=\"/favorites\" render={() => <Favorites />} />\n            <Route path=\"*\" render={() => <h1>Страница не найдена</h1>} />\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","import { compose } from \"redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport App from \"./App\";\n\nconst mapStateToProps = () => ({});\nconst AppContainer = compose(withRouter, connect(mapStateToProps, {}))(App);\n\nexport default AppContainer;\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./Redux/store\";\nimport AppContainer from \"./AppContainer\";\n\nconst AppShopServices = () => {\n  return (\n    <React.StrictMode>\n      <Router>\n        <Provider store={store}>\n          <AppContainer />\n        </Provider>\n      </Router>\n    </React.StrictMode>\n  );\n};\nexport default AppShopServices;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport AppShopServices from \"./AppShopServices\";\n\nReactDOM.render(<AppShopServices />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"NavBar_nav__kJUTv\",\"item\":\"NavBar_item__3I6u4\",\"activeLink\":\"NavBar_activeLink__3P6mV\"};"],"sourceRoot":""}